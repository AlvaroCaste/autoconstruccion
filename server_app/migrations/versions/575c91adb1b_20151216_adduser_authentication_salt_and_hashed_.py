"""adduser authentication, salt and hashed password

Revision ID: 575c91adb1b
Revises: 174869c6926
Create Date: 2015-12-16 12:58:18.424201

"""

# revision identifiers, used by Alembic.
revision = '575c91adb1b'
down_revision = '174869c6926'
branch_labels = None
depends_on = None

from alembic import op
import sqlalchemy as sa


def upgrade():
    import os
    import hashlib
    HASH_SIZE = 32  # sha256 -> 32 bytes
    default_password = '123456'

    # current users are by default active
    op.add_column('users', sa.Column('_active', sa.Boolean(), nullable=True,
                                     server_default=sa.sql.expression.true()))

    # reate the new columns
    op.add_column('users', sa.Column('_salt', sa.Binary(length=HASH_SIZE), nullable=True))
    op.add_column('users', sa.Column('_hashed_password', sa.Binary(length=HASH_SIZE), nullable=True))

    # Store the salt and the hashed default password
    users = sa.table('users', sa.Column('id'),
                     sa.Column('_salt'),
                     sa.Column('_hashed_password'))
    connection = op.get_bind()
    for user in connection.execute(sa.select([sa.column('id')]).select_from(sa.text('users'))):
        if user:
            salt = os.urandom(HASH_SIZE)
            pwd = hashlib.sha256(salt + bytes(default_password, encoding='utf8')).digest()
            connection.execute(
                users.update().where(
                    users.c.id == user.id
                ).values(
                    _salt=salt,
                    _hashed_password=pwd,
                )
            )

    # alter columns to be not nullable
    op.alter_column('users', '_salt', nullable=False)
    op.alter_column('users', '_hashed_password', nullable=False)


def downgrade():
    ### commands auto generated by Alembic - please adjust! ###
    op.drop_column('users', '_salt')
    op.drop_column('users', '_hashed_password')
    op.drop_column('users', '_active')
    ### end Alembic commands ###
